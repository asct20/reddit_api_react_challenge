[{"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/index.js":"1","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/App.js":"2","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/reportWebVitals.js":"3","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/TopPosts/TopPosts.js":"4","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/Login/Login.js":"5","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/LinkToRedditAuth/LinkToRedditAuth.js":"6","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/config/RedditConfig.js":"7","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/PostList/PostList.js":"8","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/Post/Post.js":"9"},{"size":595,"mtime":1610762386000,"results":"10","hashOfConfig":"11"},{"size":2286,"mtime":1610817245000,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610743417000,"results":"13","hashOfConfig":"11"},{"size":2989,"mtime":1610818909000,"results":"14","hashOfConfig":"11"},{"size":988,"mtime":1610815449000,"results":"15","hashOfConfig":"11"},{"size":1051,"mtime":1610818948000,"results":"16","hashOfConfig":"11"},{"size":338,"mtime":1610813143000,"results":"17","hashOfConfig":"11"},{"size":539,"mtime":1610816764000,"results":"18","hashOfConfig":"11"},{"size":691,"mtime":1610816744000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"184z8up",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/index.js",[],["40","41"],"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/App.js",[],"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/reportWebVitals.js",[],"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/TopPosts/TopPosts.js",["42","43"],"import { useEffect, useState } from 'react';\nimport { Spinner, Alert, Button, Row, Col } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport * as RedditConfig from '../../config/RedditConfig';\nimport PostList from '../PostList/PostList';\n\nfunction TopPosts(props) {\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [posts, setPosts] = useState([]);\n\n  // Number of posts to fetch. Defining it as a constant here but\n  // if this needed to be configurable, we could pass it as a prop or as a query parameter.\n  const POSTS_COUNT = 20;\n\n  const formatData = (data) => {\n    if (!data || !data.data || !data.data.children) {\n      throw Error('Invalid data');\n    }\n\n    // Use destructuring to pick only some properties from each post data\n    const postsData = data.data.children.map(e => \n      ((\n        {\n          ups,\n          score,\n          author,\n          permalink,\n          title,\n          num_comments,\n          id\n        }\n      ) => (\n        {\n          ups,\n          score,\n          author,\n          permalink,\n          title,\n          num_comments,\n          id\n        } \n      ))(e.data))\n      .sort((post1, post2) => post2.num_comments - post1.num_comments);\n\n      return postsData;\n  };\n\n  const fetchPosts = async () => {\n    setIsLoading(true);\n    setErrorMessage('');\n\n    const url = `${RedditConfig.REDDIT_TOP_POSTS_URL}?limit=${POSTS_COUNT}`;\n\n    try {\n      const rawResponse = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${props.authToken}`\n        }\n      });\n\n      if (!rawResponse.ok) {\n        if (rawResponse.status === 401) {\n          props.clearAuthToken();\n          window.location.reload();\n        }\n        throw Error(`Error ${rawResponse.status} ${rawResponse.statusText}`);\n      }\n\n      const data = await rawResponse.json();\n      const postsData = formatData(data);\n      setPosts(postsData);\n    }\n    catch (err) {\n      setErrorMessage(err.message);\n    }\n    finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch data on page load\n  useEffect(() => {\n    async function callFetchPosts() {\n      await fetchPosts();\n    }\n\n    callFetchPosts();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // pass empty array to call the function only once\n\n  return (\n    <div>\n      { errorMessage && <Alert variant='danger'>\n          {errorMessage}\n        </Alert>\n      }\n\n      <h1 style={{float: 'left'}}>Top Posts</h1>\n      <Button\n        variant=\"outline-primary\"\n        style={{float: 'right'}}\n        onClick={fetchPosts}>Refresh</Button>\n\n        { isLoading ? (\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>)\n          : (<PostList posts={posts} />)\n        }\n    </div>\n  );\n}\n\nTopPosts.propTypes = {\n  clearAuthToken: PropTypes.func.isRequired\n};\n\nexport default TopPosts;","/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/Login/Login.js",[],"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/LinkToRedditAuth/LinkToRedditAuth.js",[],"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/config/RedditConfig.js",[],"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/PostList/PostList.js",[],"/Users/Alexandre/JOB_SEARCH/2021/Fortress/reddit_api_react_challenge/last_laugh/src/components/Post/Post.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":34,"nodeType":"50","messageId":"51","endLine":2,"endColumn":37},{"ruleId":"48","severity":1,"message":"52","line":2,"column":39,"nodeType":"50","messageId":"51","endLine":2,"endColumn":42},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","no-global-assign","no-unsafe-negation"]